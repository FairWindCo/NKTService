# Generated by Django 2.1.7 on 2019-05-29 12:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Тип контатной информации')),
                ('col_num', models.IntegerField(default=None, null=True, verbose_name='Номер колонки для импорта')),
            ],
            options={
                'verbose_name': 'Тип контакта',
                'verbose_name_plural': 'Типы контактной инфомации',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemCatalog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Артикул')),
                ('item_name', models.CharField(max_length=250, verbose_name='Наименование')),
                ('parentCatalog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ItemCatalog')),
            ],
        ),
        migrations.CreateModel(
            name='ItemProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=300, null=True, verbose_name='Адрес')),
                ('comments', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Комментарий')),
                ('int_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя в базе')),
                ('template', models.CharField(blank=True, max_length=100, null=True, verbose_name='Шаблон')),
            ],
            options={
                'verbose_name': 'Поставщик или сервисный центр',
                'verbose_name_plural': 'Поставщики и сервисные центы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemProviderContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.CharField(max_length=100)),
                ('contactPerson', models.CharField(max_length=200, null=True)),
                ('is_repair_service', models.BooleanField(default=False, verbose_name='Это контакт сервисного центра')),
                ('contactType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.ContactTypes')),
                ('itemProvider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ItemProvider')),
            ],
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Артикул')),
                ('item_name', models.CharField(max_length=250, verbose_name='Наименование')),
                ('manufacturer', models.CharField(max_length=200, verbose_name='Производитель')),
                ('price', models.FloatField(blank=True, default=None, null=True, verbose_name='Стоимость')),
                ('comments', models.TextField(blank=True, default='', max_length=500, verbose_name='Коментарий')),
                ('code1', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код 1')),
                ('code2', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код 2')),
                ('code3', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код 3')),
                ('catalog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ItemCatalog')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=250, verbose_name='Изделие/Товар')),
                ('adi_code', models.CharField(blank=True, max_length=250, null=True, verbose_name='Код')),
                ('manufacturer', models.CharField(max_length=200, verbose_name='Производитель')),
                ('price', models.FloatField(blank=True, default=None, null=True, verbose_name='Стоимость')),
                ('item_purchase_date', models.DateField(blank=True, default=None, null=True, verbose_name='Дата покупки')),
                ('serial_number', models.CharField(blank=True, max_length=100, verbose_name='Серийный номер')),
                ('purchase_document', models.CharField(blank=True, default='', max_length=200, verbose_name='Документ о покупке/гарантии')),
                ('contact_person', models.CharField(max_length=200, verbose_name='Контактное лицо')),
                ('contact_phone', models.CharField(max_length=50, verbose_name='Контактный телефон')),
                ('damage', models.TextField(max_length=1000, verbose_name='Повреждение/Проблема')),
                ('comments', models.TextField(blank=True, default='', max_length=1000, verbose_name='Коментарий')),
                ('equipment', models.TextField(max_length=500, verbose_name='Комплектация')),
                ('date_of_receipt', models.DateTimeField(auto_now_add=True, verbose_name='Дата приема')),
                ('close_date', models.DateField(null=True, verbose_name='Дата закрытия заявки')),
                ('is_service_order', models.BooleanField(default=False, verbose_name='Это заказ от сервиса')),
                ('customer', models.CharField(blank=True, max_length=200, null=True, verbose_name='Поставщик (примечание)')),
                ('date_of_modify', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('warranty', models.IntegerField(blank=True, null=True, verbose_name='Гарантийный срок')),
                ('count', models.IntegerField(default=1, verbose_name='Количество')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Автор заявки')),
                ('itemProvider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ItemProvider', verbose_name='Поставщик')),
                ('modify_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiers', to=settings.AUTH_USER_MODEL, verbose_name='Последний редактор')),
                ('parentOrder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ServiceOrder', verbose_name='На основании')),
            ],
            options={
                'verbose_name': 'Заказ на сервис',
                'verbose_name_plural': 'Заказы на сервис',
                'ordering': ['-date_of_receipt', '-id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceOrderProcessing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(max_length=1000)),
                ('date_of_change', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('move_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ItemProvider')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceStatuses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название состояния')),
                ('template', models.TextField(blank=True, default='', max_length=1000, null=True, verbose_name='Шаблон комментария')),
                ('is_start', models.BooleanField(default=False, verbose_name='Начальный этап')),
                ('is_terminate', models.BooleanField(default=False, verbose_name='Завершает обработку')),
                ('is_need_move', models.BooleanField(default=False, verbose_name='Требует перемищения')),
                ('is_need_client', models.BooleanField(default=False, verbose_name='Требует взаимодействия с клиентом')),
                ('create_service_order', models.BooleanField(default=False, verbose_name='Перенести в сервисный заказ')),
                ('next_state', models.ManyToManyField(blank=True, default=None, to='base.ServiceStatuses', verbose_name='Следующие действия')),
            ],
            options={
                'verbose_name': 'Состояние заказа',
                'verbose_name_plural': 'Состояния заказов',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='serviceorderprocessing',
            name='new_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ServiceStatuses'),
        ),
        migrations.AddField(
            model_name='serviceorderprocessing',
            name='serviceOrder',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ServiceOrder'),
        ),
        migrations.AddField(
            model_name='serviceorder',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ServiceStatuses', verbose_name='Статус'),
        ),
    ]
